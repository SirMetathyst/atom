Kits:
    - FlatbufferKit (for save/load)
    - BinaryKit     (for networking/bin packing)
    - SyncKit       (for world replication / syncing components between machines)
    - SDLKit        (for SDL layer, rendering, input, windows etc)

API
    - instead of registering component with entity manager on init func, register with a component registry so 
        that you can call a single method e.g. EntityManager.RegisterComponentsWithRegistry. 
        instead of having call myKit.RegisterMyComponent for every single component for multiple 
        entity managers.
    - write example files for go.doc using example_xxx.go in project root
    - write benchmarks
    - Make SyncKit compatible with Entitas through Entitas Sync Framework so that you can write your game code
        in golang+zinc and your view/client code in Unity3D+Entitas
    - Possibly add a FilteredGroup and FilteredCollector which calls a provided function to determine
        if an entity should be added to it's entity list. aka. grab all entities that have a Health
        component and a Monster component where health is greater than 50. Function can return true to
        tell the type to retain the entity or false to discard it.
