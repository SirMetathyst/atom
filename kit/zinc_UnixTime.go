// Package kit ...
// generated by zinc/SingleComponentDataTemplate. DO NOT EDIT.
package kit

import (
	"github.com/SirMetathyst/zinc"
)

// ZUnixTime ...
var ZUnixTime uint = uint(1804421562)

// UnixTimeComponent ...
type UnixTimeComponent struct {
	ctx  *zinc.ZContext
	data map[zinc.ZEntityID]int
}

// RegisterUnixTimeComponentWith ...
func RegisterUnixTimeComponentWith(e *zinc.ZEntityManager) {
	x := NewUnixTimeComponent()
	ctx := e.RegisterComponent(ZUnixTime, x)
	x.SetContext(ctx)
}

// RegisterUnixTimeComponent ...
func RegisterUnixTimeComponent() {
	x := NewUnixTimeComponent()
	ctx := zinc.Default().RegisterComponent(ZUnixTime, x)
	x.SetContext(ctx)
}

// NewUnixTimeComponent ...
func NewUnixTimeComponent() *UnixTimeComponent {
	return &UnixTimeComponent{data: make(map[zinc.ZEntityID]int)}
}

func init() {
	RegisterUnixTimeComponent()
}

// SetContext ...
func (c *UnixTimeComponent) SetContext(ctx *zinc.ZContext) {
	if c.ctx == nil {
		c.ctx = ctx
	}
}

// AddUnixTime ...
func (c *UnixTimeComponent) AddUnixTime(id zinc.ZEntityID, time int) error {
	if c.ctx.HasEntity(id) {
		if !c.HasEntity(id) {
			c.data[id] = time
			c.ctx.ComponentAdded(ZUnixTime, id)
			return nil
		}
		return zinc.ErrEntityComponentAlreadyExists
	}
	return zinc.ErrEntityNotFound
}

// UpdateUnixTime ...
func (c *UnixTimeComponent) UpdateUnixTime(id zinc.ZEntityID, time int, silent bool) error {
	if c.ctx.HasEntity(id) {
		if c.HasEntity(id) {
			c.data[id] = time
			if !silent {
				c.ctx.ComponentUpdated(ZUnixTime, id)
			}
			return nil
		}
		return zinc.ErrEntityComponentNotFound
	}
	return zinc.ErrEntityNotFound
}

// HasEntity ...
func (c *UnixTimeComponent) HasEntity(id zinc.ZEntityID) bool {
	_, ok := c.data[id]
	return ok
}

// UnixTime ...
func (c *UnixTimeComponent) UnixTime(id zinc.ZEntityID) (int, error) {
	data, ok := c.data[id]
	if c.ctx.HasEntity(id) {
		if ok {
			return data, nil
		}
		return data, zinc.ErrEntityComponentNotFound
	}
	return data, zinc.ErrEntityNotFound
}

// DeleteEntity ...
func (c *UnixTimeComponent) DeleteEntity(id zinc.ZEntityID) error {
	if c.ctx.HasEntity(id) {
		if c.HasEntity(id) {
			delete(c.data, id)
			c.ctx.ComponentDeleted(ZUnixTime, id)
			return nil
		}
		return zinc.ErrEntityComponentNotFound
	}
	return zinc.ErrEntityNotFound
}

// AddUnixTimeX ...
func AddUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID, time int) error {
	v := e.Component(ZUnixTime)
	c := v.(*UnixTimeComponent)
	return c.AddUnixTime(id, time)
}


// MustAddUnixTimeX ...
func MustAddUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID, time int) {
	err := AddUnixTimeX(e, id, time)
	if err != nil {
		panic(err)
	}
}

// AddUnixTime ...
func AddUnixTime(id zinc.ZEntityID, time int) error {
	return AddUnixTimeX(zinc.Default(), id, time)
}


// MustAddUnixTime ...
func MustAddUnixTime(id zinc.ZEntityID, time int) {
	err := AddUnixTimeX(zinc.Default(), id, time)
	if err != nil {
		panic(err)
	}
}

// UpdateUnixTimeSilentlyX ...
func UpdateUnixTimeSilentlyX(e *zinc.ZEntityManager, id zinc.ZEntityID, time int) error {
	v := e.Component(ZUnixTime)
	c := v.(*UnixTimeComponent)
	return c.UpdateUnixTime(id, time, true)
}


// MustUpdateUnixTimeSilentlyX ...
func MustUpdateUnixTimeSilentlyX(e *zinc.ZEntityManager, id zinc.ZEntityID, time int) {
	err := UpdateUnixTimeSilentlyX(e, id, time)
	if err != nil {
		panic(err)
	}
}

// UpdateUnixTimeSilently ...
func UpdateUnixTimeSilently(id zinc.ZEntityID, time int) error {
	return UpdateUnixTimeSilentlyX(zinc.Default(), id, time)
}


// MustUpdateUnixTimeSilently ...
func MustUpdateUnixTimeSilently(id zinc.ZEntityID, time int) {
	err := UpdateUnixTimeSilentlyX(zinc.Default(), id, time)
	if err != nil {
		panic(err)
	}
}

// UpdateUnixTimeX ...
func UpdateUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID, time int) error {
	v := e.Component(ZUnixTime)
	c := v.(*UnixTimeComponent)
	return c.UpdateUnixTime(id, time, false)
}


// MustUpdateUnixTimeX ...
func MustUpdateUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID, time int) {
	err := UpdateUnixTimeX(e, id, time)
	if err != nil {
		panic(err)
	}
}

// UpdateUnixTime ...
func UpdateUnixTime(id zinc.ZEntityID, time int) error {
	return UpdateUnixTimeX(zinc.Default(), id, time)
}


// MustUpdateUnixTime ...
func MustUpdateUnixTime(id zinc.ZEntityID, time int) {
	err := UpdateUnixTimeX(zinc.Default(), id, time)
	if err != nil {
		panic(err)
	}
}

// SetUnixTimeX ...
func SetUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID, time int) error {
	v := e.Component(ZUnixTime)
	c := v.(*UnixTimeComponent)
	if c.HasEntity(id) {
		return c.UpdateUnixTime(id, time, false)
	}
	return c.AddUnixTime(id, time)
}


// MustSetUnixTimeX ...
func MustSetUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID, time int) {
	err := SetUnixTimeX(e, id, time)
	if err != nil {
		panic(err)
	}
}

// SetUnixTime ...
func SetUnixTime(id zinc.ZEntityID, time int) error {
	return SetUnixTimeX(zinc.Default(), id, time)
}


// MustSetUnixTime ...
func MustSetUnixTime(id zinc.ZEntityID, time int) {
	err := SetUnixTime(id, time)
	if err != nil {
		panic(err)
	}
}

// HasUnixTimeX ...
func HasUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID) bool {
	v := e.Component(ZUnixTime)
	return v.HasEntity(id)
}

// HasUnixTime ...
func HasUnixTime(id zinc.ZEntityID) bool {
	return HasUnixTimeX(zinc.Default(), id)
}

// UnixTimeX ...
func UnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID) (int, error) {
	v := e.Component(ZUnixTime)
	c := v.(*UnixTimeComponent)
	return c.UnixTime(id)
}


// MustUnixTimeX ...
func MustUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID) int {
	data, err := UnixTimeX(e, id)
	if err != nil {
		panic(err)
	}
	return data
}

// UnixTime ...
func UnixTime(id zinc.ZEntityID) (int, error) {
	return UnixTimeX(zinc.Default(), id)
}


// MustUnixTime ...
func MustUnixTime(id zinc.ZEntityID) int {
	data, err := UnixTimeX(zinc.Default(), id)
	if err != nil {
		panic(err)
	}
	return data
}

// DeleteUnixTimeX ...
func DeleteUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID) error {
	v := e.Component(ZUnixTime)
	return v.DeleteEntity(id)
}


// MustDeleteUnixTimeX ...
func MustDeleteUnixTimeX(e *zinc.ZEntityManager, id zinc.ZEntityID) {
	err := DeleteUnixTimeX(e, id)
	if err != nil {
		panic(err)
	}
}

// DeleteUnixTime ...
func DeleteUnixTime(id zinc.ZEntityID) error {
	return DeleteUnixTimeX(zinc.Default(), id)
}


// MustDeleteUnixTime ...
func MustDeleteUnixTime(id zinc.ZEntityID) {
	err := DeleteUnixTime(id)
	if err != nil {
		panic(err)
	}
}